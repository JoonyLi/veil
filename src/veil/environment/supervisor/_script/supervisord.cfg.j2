{% set config = options.supervisor %}
{% autoescape false %}
;[unix_http_server]
;file=/tmp/supervisor.sock   ; (the path to the socket file)
;chmod=0700                 ; sockef file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; (default is no username (open server))
;password=123               ; (default is no password (open server))

{% if config.inet_http_server %}
[inet_http_server]
port={{ config.inet_http_server.host }}:{{ config.inet_http_server.port }}
{% if config.inet_http_server.username is not none %}
username={{ config.inet_http_server.username }}
{% endif %}
{% if config.inet_http_server.password is not none %}
password={{ config.inet_http_server.password }}
{% endif %}
{% endif %}

[supervisord]
logfile={{ config.logging.directory }}/supervisor.log
logfile_maxbytes={{ config.logging.max_size or '50MB' }}
logfile_backups={{ config.logging.backups_count or 10 }}
pidfile={{ config.pid_file or '/tmp/supervisord.pid' }}
nodaemon={{ not config.daemonize }}

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

;[supervisorctl]
;serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket
;username=chris              ; should be same as http_username if set
;password=123                ; should be same as http_password if set
;prompt=mysupervisor         ; cmd line prompt (default "supervisor")
;history_file=~/.sc_history  ; use readline history if available

; The below sample program section shows all possible program subsection values,
; create one or more 'real' program: sections to be able to control them under
; supervisor.

{% for program_name, program in config.programs.items() if program %}
[program:{{ program_name }}]
{% if program.user %}
user={{ program.user }}
{% endif %}
{% if program.environment_variables %}
environment={{ format_environment_variables(program.environment_variables) }}
{% endif %}
command={{ format_command(program.command, program.args) }}
{% if program.process_name %}
process_name={{ program.process_name }}
{% else %}
{% if program.processes_count and program.processes_count > 1 %}
process_name=%(program_name)s-%(process_num)s
{% else %}
process_name=%(program_name)s
{% endif %}
{% endif %}
numprocs={{ program.processes_count or 1 }}
stopwaitsecs=30
redirect_stderr=True
{% if program.logging and program.logging.file %}
stdout_logfile={{ program.logging.file }}
{% else %}
stdout_logfile={{ config.logging.directory }}/{{ program_name }}.log
{% endif %}
{% if program.logging and program.logging.max_size %}
stdout_logfile_maxbytes={{ program.logging.max_size }}
{% else %}
stdout_logfile_maxbytes={{ config.logging.max_size or '50MB' }}
{% endif %}
{% if program.logging and program.logging.backups_count %}
stdout_logfile_backups={{ program.logging.backups_count }}
{% else %}
stdout_logfile_backups={{ config.logging.backups_count or 10 }}
{% endif %}
{% if program.expected_exit_codes %}
exitcodes={{ ','.join(program.expected_exit_codes) }}
{% else %}
exitcodes=0,2
{% endif %}
stopsignal={{ program.stop_signal or 'INT' }}
{% endfor %}

; The below sample eventlistener section shows all possible
; eventlistener subsection values, create one or more 'real'
; eventlistener: sections to be able to handle event notifications
; sent by supervisor.

;[eventlistener:theeventlistenername]
;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)
;process_name=%(program_name)s ; process_name expr (default %(program_name)s)
;numprocs=1                    ; number of processes copies to start (def 1)
;events=EVENT                  ; event notif. types to subscribe to (req'd)
;buffer_size=10                ; event buffer queue size (default 10)
;directory=/tmp                ; directory to cwd to before exec (def no cwd)
;umask=022                     ; umask for process (default None)
;priority=-1                   ; the relative start priority (default -1)
;autostart=true                ; start at supervisord start (default: true)
;autorestart=unexpected        ; restart at unexpected quit (default: unexpected)
;startsecs=10                  ; number of secs prog must stay running (def. 1)
;startretries=3                ; max # of serial start failures (default 3)
;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
;stopsignal=QUIT               ; signal used to kill process (default TERM)
;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
;user=chrism                   ; setuid to this UNIX account to run the program
;redirect_stderr=true          ; redirect proc stderr to stdout (default false)
;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO
;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)
;stdout_events_enabled=false   ; emit events on stdout writes (default false)
;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO
;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)
;stderr_logfile_backups        ; # of stderr logfile backups (default 10)
;stderr_events_enabled=false   ; emit events on stderr writes (default false)
;environment=A=1,B=2           ; process environment additions
;serverurl=AUTO                ; override serverurl computation (childutils)

; The below sample group section shows all possible group values,
; create one or more 'real' group: sections to create "heterogeneous"
; process groups.

{% for group_name, programs in config.get('groups', {}).items() %}
[group:{{ group_name }}]
programs= {{ programs | join(',') }}
{% endfor %}

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

;[include]
;files = relative/directory/*.ini
{% endautoescape %}